{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["React3dBoxBuilder","downloadAnchorReference","React","floorElementWidth","useState","floorSizes","x","y","pressedKeys","control","shift","mouseOnFloor","setMouseOnFloor","objectData","setHideGhostCube","cameraMap","rotate","rotateX","rotateY","translateX","translateY","translateZ","scale","mouseCurrentPosition","setMouseCurrentPosition","floorAreaDynamicStyles","minWidth","minHeight","transform","cursor","getCurrentFloorPosition","offsetX","offsetY","basedOnFloorAndNewObject","newValues","occupiedElements","fromX","element","fromY","toX","toY","fromZ","toZ","occupiedElementFound","iteratorX","iteratorY","download","ref","style","display","href","className","styles","onContextMenu","event","onMouseMove","newPositions","onMouseMoveHandler","onMouseEnter","onMouseLeave","onMouseDown","onMouseDownHandler","data-x-position","top","left","borderLeft","data-y-position","borderTop","App","text","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1edace3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styles from './styles.module.css';\n\nexport const React3dBoxBuilder = ({ xxx }) => {\n  const downloadAnchorReference = React.createRef();\n\n  const [floorElementWidth, setFloorElementWidth] = useState(100);\n  const [floorSizes, setFloorSizes] = useState({\n    x: 30,\n    y: 15\n  });\n\n  const [pressedKeys, setPressedKeys] = useState({\n    control: false,\n    shift: false\n  });\n  \n  const [mouseOnFloor, setMouseOnFloor] = useState(false);\n  const [objectData, setObjectData] = useState([]);\n  const [hideGhostCube, setHideGhostCube] = useState(false);\n  \n  const [cameraMap, setCameraMap] = useState({\n    rotate: 0,\n    rotateX: 0,\n    rotateY: 0,\n    translateX: 0,\n    translateY: 0,\n    translateZ: -1200,\n    scale: 1\n  });\n  \n  const [mouseCurrentPosition, setMouseCurrentPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  const floorAreaDynamicStyles = {\n    minWidth: `${floorSizes.x * floorElementWidth}px`,\n    minHeight: `${floorSizes.y * floorElementWidth}px`,\n    transform: `rotateX(${cameraMap.rotateX}deg) rotateY(${cameraMap.rotateY}deg) scale(${cameraMap.scale}) translateX(${cameraMap.translateX}%) translateY(${cameraMap.translateY}%) rotate(${cameraMap.rotate}deg) translateZ(${cameraMap.translateZ}px)`,\n    cursor: `crosshair`\n  };\n\n  const getCurrentFloorPosition = (offsetX, offsetY, basedOnFloorAndNewObject = false) => {\n    let newValues;\n    if (basedOnFloorAndNewObject) {\n      newValues = {\n        x: offsetX > 0 ? (offsetX <= ((floorSizes.x * floorElementWidth) - floorElementWidth) ? offsetX : ((floorSizes.x * floorElementWidth) - floorElementWidth)) : 0,\n        y: offsetY > 0 ? (offsetY <= ((floorSizes.y * floorElementWidth) - floorElementWidth) ? offsetY : ((floorSizes.y * floorElementWidth) - floorElementWidth)) : 0,\n      };\n    } else {\n      newValues = {\n        x: offsetX > 0 ? (offsetX <= floorSizes.x * floorElementWidth ? offsetX : floorSizes.x * floorElementWidth) : 0,\n        y: offsetY > 0 ? (offsetY <= floorSizes.y * floorElementWidth ? offsetY : floorSizes.y * floorElementWidth) : 0,\n      };\n    }\n\n    const occupiedElements = objectData.map((element) => {\n      return {\n        fromX: element.x,\n        fromY: element.y,\n        toX: element.x + floorElementWidth,\n        toY: element.y + floorElementWidth,\n        fromZ: element.z,\n        toZ: element.z + floorElementWidth\n      }\n    })\n\n    var occupiedElementFound = null;\n    occupiedElements.forEach(element => {\n      for (let iteratorX = 1; iteratorX < floorElementWidth; iteratorX++) {\n        for (let iteratorY = 1; iteratorY < floorElementWidth; iteratorY++) {\n          if (\n            element.fromX <= (newValues.x+iteratorX) && element.toX >= (newValues.x+iteratorX)\n            && element.fromY <= (newValues.y+iteratorY) && element.toY >= (newValues.y+iteratorY)\n            && element.fromZ === 0\n          ) {\n            occupiedElementFound = element;\n            return;\n          }\n        }\n      }\n    });\n\n    if (!occupiedElementFound) {\n      return newValues;\n    }\n  };\n\n  const onMouseMoveHandler = (event) => {\n    if (!mouseOnFloor) {\n      setMouseOnFloor(true);\n    }\n    const newPositions = getCurrentFloorPosition(event.nativeEvent.offsetX, event.nativeEvent.offsetY, true);\n    if (newPositions) {\n      setMouseCurrentPosition(\n        newPositions\n      );\n      setHideGhostCube(false);\n    } else {\n      setHideGhostCube(true);\n    }\n  };\n\n  const onMouseDownHandler = (event) => {\n    const correctPosition = getCurrentFloorPosition(event.nativeEvent.offsetX, event.nativeEvent.offsetY, true);\n    \n    if (!correctPosition) {\n      return;\n    }\n\n    const positionX = correctPosition.x;\n    const positionY = correctPosition.y;\n    \n    if (!pressedKeys?.control) {\n      // elementMouseDownHandler(\n      //   positionX,\n      //   positionY,\n      //   0,\n      //   \"walk_platform\",\n      //   10,\n      //   10,\n      //   1,\n      //   event\n      // );\n    }\n  };\n\n\n  return (\n    <React.Fragment>\n      \n      <a download={'empty'} ref={downloadAnchorReference} style={{display: 'none'}} href={`empty.json`}>download</a>\n      \n      <div className={styles.boxPanel} onContextMenu={(event) => event.preventDefault()}>\n        <div className={styles.boxPanel__content}>\n          <div className={styles.boxPanel__contentContainer}>\n            <div\n              className={styles.floorArea}\n              style={floorAreaDynamicStyles}\n              onMouseMove={(event) => {\n                onMouseMoveHandler(event);\n              }}\n              onMouseEnter={(event) => {\n                setMouseOnFloor(true);\n              }}\n              onMouseLeave={() => {\n                setMouseOnFloor(false);\n              }}\n              onMouseDown={(event) => {\n                onMouseDownHandler(event);\n              }}\n            >\n              <div \n                className={`${styles.floorXLine}${mouseOnFloor && !pressedKeys.active ? ` ${styles['floorXLine--show']}` : ''}`}\n                data-x-position={`X: ${mouseCurrentPosition.x} cm`} style={{\n                '--x-position': `${mouseCurrentPosition.x}px`,\n                minWidth: `${floorSizes.x * floorElementWidth}px`,\n                minHeight: `2px`,\n                top: '-4px',\n                left: '-4px',\n                borderLeft: `4px solid #cfcfcf`\n              }}></div>\n              <div \n                className={`${styles.floorYLine}${mouseOnFloor && !pressedKeys.active ? ` ${styles['floorYLine--show']}` : ''}`}\n                data-y-position={`Y: ${mouseCurrentPosition.y} cm`} style={{\n                '--y-position': `${mouseCurrentPosition.y}px`,\n                minWidth: `2px`,\n                minHeight: `${floorSizes.y * floorElementWidth}px`,\n                left: '-4px',\n                top: '-4px',\n                borderTop: `4px solid #cfcfcf`\n              }}></div>\n            \n              {/* <div\n                className={classnames({\n                  ghost_hover: true,\n                  \"ghost_hover--show\":\n                    mouseOnFloor && !pressedKeys.active &&\n                    !hideGhostCube &&\n                    activeView === \"create\" &&\n                    !pressedKeys.active,\n                  walk_platform: elementType === \"walk_platform\",\n                  cube: elementType === \"cube\",\n                  'mini-cube': elementType === \"mini-cube\",\n                })}\n                style={{\n                  left: `${mouseCurrentPosition.x}px`,\n                  top: `${mouseCurrentPosition.y}px`,\n                  width: `${floorElementWidth}px`,\n                  height: `${floorElementWidth}px`,\n                  transform: `translateZ(${floorElementWidth * 0}px)`,\n                }}\n                data-current-position={`x: ${mouseCurrentPosition.x} cm, \\ny: ${mouseCurrentPosition.y} cm \\nw: ${floorElementWidth} cm \\nh: ${floorElementWidth} cm \\nz: ${floorElementWidth} cm`}\n              ></div> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    \n    </React.Fragment>\n  );\n};","import React from 'react'\n\nimport { React3dBoxBuilder } from 'react-3d-box-builder'\nimport 'react-3d-box-builder/dist/index.css'\n\nconst App = () => {\n  return <React3dBoxBuilder text=\"react-3d-box-builder\" />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}